name: Build and Archive Next.js App

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.14
          cache: "npm"

      - name: Next.js cache
        uses: actions/cache@v4
        with:
          # See here for caching with `yarn` https://github.com/actions/cache/blob/main/examples.md#node---yarn or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - name: Install dependencies
        run: npm install

      - name: Build and Export
        run: npm run build

      - name: Get app version
        id: package_version
        run: echo "APP_VERSION=$(jq -r .version package.json)" >> $GITHUB_ENV

      - name: Archive the 'out' folder
        run: tar -czf nextjs-out-${{ env.APP_VERSION }}.tar.gz out

      - name: Authenticate with GitHub
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Delete Previous Release (if exists)
        run: gh release delete latest --yes || true
        continue-on-error: true

      - name: Create New Release & Upload
        run: gh release create latest nextjs-out-${{ env.APP_VERSION }}.tar.gz --title "Latest Next.js Export" --notes "Next.js static export for version ${{ env.APP_VERSION }}"
